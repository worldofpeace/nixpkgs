diff --git a/src/Views/FirewallPanel.vala b/src/Views/FirewallPanel.vala
index 994c4d1..9ad5f1a 100644
--- a/src/Views/FirewallPanel.vala
+++ b/src/Views/FirewallPanel.vala
@@ -49,10 +49,13 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
     }
 
     construct {
-        settings = new Settings ("io.elementary.switchboard.security-privacy");
+        SettingsSchemaSource sss = new SettingsSchemaSource.from_directory ("@SWITCHBOARD_SEC_PRIV_GSETTINGS_PATH@", SettingsSchemaSource.get_default (), true);
+        SettingsSchema security_privacy_schema = sss.lookup ("io.elementary.switchboard.security-privacy", false);
+        settings = new Settings.full (security_privacy_schema, null, null);
+
         disabled_rules = new Gee.HashMap<string, UFWHelpers.Rule> ();
         load_disabled_rules ();
-        
+
         status_switch.notify["active"].connect (() => {
             if (loading == false) {
                 view.sensitive = status_switch.active;
@@ -109,20 +112,20 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
             new_rule.version = (UFWHelpers.Rule.Version)version;
             string hash = generate_hash_for_rule (new_rule);
             disabled_rules.set (hash, new_rule);
-        }    
+        }
     }
 
     private string generate_hash_for_rule (UFWHelpers.Rule r) {
-        return r.to + 
-               r.to_ports + 
-               r.from + 
-               r.from_ports + 
-               r.action.to_string () + 
-               r.protocol.to_string () + 
-               r.direction.to_string () + 
+        return r.to +
+               r.to_ports +
+               r.from +
+               r.from_ports +
+               r.action.to_string () +
+               r.protocol.to_string () +
+               r.direction.to_string () +
                r.version.to_string ();
     }
-    
+
     private void reload_rule_numbers () {
         foreach (var rule in UFWHelpers.get_rules ()) {
             string ufw_hash = generate_hash_for_rule (rule);
@@ -137,11 +140,11 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
                     list_store.set_value (iter, Columns.RULE, tree_rule);
                     return true;
                 }
-                
+
 		        return false;
 	        };
             list_store.foreach (update_row);
-        }    
+        }
     }
 
     private void show_rules () {
@@ -150,7 +153,7 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
         foreach (var rule in UFWHelpers.get_rules ()) {
             add_rule (rule);
         }
-        
+
         load_disabled_rules ();
         foreach (var rule in disabled_rules.entries) {
             add_rule (rule.value, false, rule.key);
@@ -164,7 +167,7 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
 
     private void enable_rule (string hash) {
         UFWHelpers.add_rule (disabled_rules.get (hash));
-        delete_disabled_rule (hash);        
+        delete_disabled_rule (hash);
     }
 
     private void delete_disabled_rule (string hash) {
@@ -175,23 +178,23 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
     private void save_disabled_rules (UFWHelpers.Rule? additional_rule = null) {
         VariantBuilder builder = new VariantBuilder (new VariantType("a(ssssiiii)"));
         foreach (var existing_rule in disabled_rules.values) {
-            builder.add ("(ssssiiii)", existing_rule.to, 
-                                       existing_rule.to_ports, 
-                                       existing_rule.from, 
+            builder.add ("(ssssiiii)", existing_rule.to,
+                                       existing_rule.to_ports,
+                                       existing_rule.from,
                                        existing_rule.from_ports,
-                                       existing_rule.action, 
-                                       existing_rule.protocol, 
-                                       existing_rule.direction, 
+                                       existing_rule.action,
+                                       existing_rule.protocol,
+                                       existing_rule.direction,
                                        existing_rule.version);
         }
         if (additional_rule != null) {
-            builder.add ("(ssssiiii)", additional_rule.to, 
-                                       additional_rule.to_ports, 
-                                       additional_rule.from, 
+            builder.add ("(ssssiiii)", additional_rule.to,
+                                       additional_rule.to_ports,
+                                       additional_rule.from,
                                        additional_rule.from_ports,
-                                       additional_rule.action, 
-                                       additional_rule.protocol, 
-                                       additional_rule.direction, 
+                                       additional_rule.action,
+                                       additional_rule.protocol,
+                                       additional_rule.direction,
                                        additional_rule.version);
         }
         settings.set_value ("disabled-firewall-rules", builder.end ());
@@ -230,7 +233,7 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
         } else if (rule.version == UFWHelpers.Rule.Version.IPV4) {
             version = "IPv4";
         }
-        
+
         string from = "";
         string to = "";
         if (rule.from_ports != "") {
@@ -252,21 +255,21 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
         } else {
             to = rule.to;
         }
- 
+
         list_store.append (out iter);
         list_store.set (iter, Columns.ACTION, action, Columns.PROTOCOL, protocol,
-                Columns.DIRECTION, direction, Columns.V6, version, Columns.ENABLED, enabled, 
+                Columns.DIRECTION, direction, Columns.V6, version, Columns.ENABLED, enabled,
                 Columns.RULE, rule, Columns.TO, to.strip (), Columns.FROM, from.strip ());
     }
 
     private void create_treeview () {
         list_store = new Gtk.ListStore (Columns.N_COLUMNS, typeof (string),
-                                                           typeof (string), 
-                                                           typeof (string),     
                                                            typeof (string),
-                                                           typeof (string), 
-                                                           typeof (string), 
-                                                           typeof (bool), 
+                                                           typeof (string),
+                                                           typeof (string),
+                                                           typeof (string),
+                                                           typeof (string),
+                                                           typeof (bool),
                                                            typeof (UFWHelpers.Rule));
 
         // The View:
@@ -427,7 +430,7 @@ public class SecurityPrivacy.FirewallPanel : Granite.SimpleSettingsPage {
             string gen_hash = generate_hash_for_rule (rule);
             Value active;
             list_store.get_value (iter, Columns.ENABLED, out active);
-            if (active.get_boolean ()) {                
+            if (active.get_boolean ()) {
                 UFWHelpers.remove_rule (rule);
             } else {
                 delete_disabled_rule (gen_hash);
